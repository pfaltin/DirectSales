// <auto-generated />
using System;
using DirectSales04.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DirectSales04.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230727161638_AddedSaleSaleiemEntries")]
    partial class AddedSaleSaleiemEntries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DirectSales04.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4e48ebc - dde2 - 44ef - aa10 - f77c91acc588",
                            AccessFailedCount = 0,
                            Address = "Donji Glib 56",
                            ConcurrencyStamp = "d5d690d4-ca4b-46bc-8715-0db499369922",
                            Email = "admin@direct-sales.com",
                            EmailConfirmed = false,
                            FirstName = "Tvrtko",
                            LastName = "Tvrdic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DIRECT-SALES.COM",
                            NormalizedUserName = "ADMIN@DIRECT-SALES.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7Fi7mCl1cANx4ltYTgA+6ZeeQBHIGc77Ra4djvUGIouGUxyM2f830olm9ZlxhEXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e95659-72c9-41e8-b36b-349c851c58db",
                            TwoFactorEnabled = false,
                            UserName = "admin@direct-sales.com"
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Ulje",
                            Description = "Ulja"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Esencija",
                            Description = "Esencije"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Kupka",
                            Description = "Za kupanje"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Krema",
                            Description = "Za mazanje"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Ostalo",
                            Description = "Razno"
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OIB")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            City = "Zagoroza",
                            Country = "Stripland",
                            Email = "zagor@zagor.tw",
                            OIB = "41234",
                            Phone = "5647456",
                            PostalCode = "3412",
                            Remarks = "z",
                            Street = "Gornja 3",
                            Title = "Zagor"
                        },
                        new
                        {
                            ClientId = 2,
                            City = "Blektown",
                            Country = "Stripland",
                            Email = "blek@blek.bl",
                            OIB = "452345",
                            Phone = "4523523",
                            PostalCode = "1234",
                            Remarks = "s",
                            Street = "Donja 7",
                            Title = "Blek"
                        },
                        new
                        {
                            ClientId = 3,
                            City = "Brdar",
                            Country = "Stripland",
                            Email = "mirko@mirko.mi",
                            OIB = "6785678",
                            Phone = "78907890",
                            PostalCode = "4536",
                            Remarks = "h",
                            Street = "Lijeva 34",
                            Title = "Mirko"
                        },
                        new
                        {
                            ClientId = 4,
                            City = "Mrkvine",
                            Country = "Stripland",
                            Email = "slavko@slavko.sl",
                            OIB = "567856",
                            Phone = "45674567",
                            PostalCode = "1234",
                            Remarks = "g",
                            Street = "Desna",
                            Title = "Slavko"
                        },
                        new
                        {
                            ClientId = 5,
                            City = "Konjski",
                            Country = "Stripland",
                            Email = "miki@miki.mi",
                            OIB = "56785678",
                            Phone = "3456345",
                            PostalCode = "7687",
                            Remarks = "d",
                            Street = "Laka 978",
                            Title = "Miki"
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("SKU")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Umirujuce i procišcavajuce djelovanje, za cijelu obitelj. 10 ml",
                            Image = "3816.png",
                            Price = 26.22m,
                            SKU = 0,
                            Title = "ULJE TEA TREE"
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Mir i vedrina sugestivnog mirisa. 10 ml",
                            Image = "3804.png",
                            Price = 97.34m,
                            SKU = 0,
                            Title = "ULJE LAVANDE"
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Procišcavajuca svojstva i energizirajuci miris. 10 ml",
                            Image = "3801.png",
                            Price = 4.34m,
                            SKU = 0,
                            Title = "ULJE LIMUNA"
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Suncana atmosfera za dobro raspoloženje. 10 ml",
                            Image = "3806.png",
                            Price = 7.34m,
                            SKU = 0,
                            Title = "ULJE NARANČE"
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Za obnovljeni osjecaj svježine i koncentracije. 10 ml",
                            Image = "3850.png",
                            Price = 45.34m,
                            SKU = 0,
                            Title = "ULJE METVICE"
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Slatke note agruma za pospješivanje tonusa, na harmonican nacin. 10 ml",
                            Image = "3997.png",
                            Price = 32.34m,
                            SKU = 0,
                            Title = "ENERGY+ "
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "Nešto što uvijek mora biti nadohvat ruke, za blagostanje i ravnotežu. 10 ml",
                            Image = "3995.png",
                            Price = 6.34m,
                            SKU = 0,
                            Title = "ANTISTRES "
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "Balzamicna mješavina s djelotvornim ucinkom procišcavanja.10 ml",
                            Image = "3802.png",
                            Price = 9.4m,
                            SKU = 0,
                            Title = "EUKALIPTUS"
                        },
                        new
                        {
                            ProductId = 9,
                            Description = "Originalna mješavina s 31 biljkom. 75 ml",
                            Image = "3515.png",
                            Price = 22.14m,
                            SKU = 0,
                            Title = "ULJE 31"
                        },
                        new
                        {
                            ProductId = 10,
                            Description = "Dragocjena mješavina soli, za procišcenu i glatku kožu. Sa solima iz Mrtvog mora, crnim sljezom, borovicom.500 g",
                            Image = "3490.png",
                            Price = 2.34m,
                            SKU = 0,
                            Title = "SOL ZA KUPANJE SAN’ACTIV"
                        },
                        new
                        {
                            ProductId = 11,
                            Description = "Nježan i mazan, za osjetljivu kožu. S medom, rižom, mlijekom, i zobi. 250 ml",
                            Image = "3459.png",
                            Price = 22.34m,
                            SKU = 0,
                            Title = "GEL ZA TUŠIRANJE MED, RIŽA, MLIJEKO, ZOB"
                        },
                        new
                        {
                            ProductId = 12,
                            Description = "Nježan eksfolijantni piling za tijelo, s detoksicirajucim i uravnotežujucim djelovanjem, kako bi koži tijela vratio sjaj i vitalnost. Sa solima iz Mrtvog mora, spirulinom. 150 ml",
                            Image = "3494.png",
                            Price = 12.34m,
                            SKU = 0,
                            Title = "DETOKS PILING ZA TIJELO"
                        },
                        new
                        {
                            ProductId = 13,
                            Description = "Topli predah s opuštajucim ucinkom.S borovicom, vražjom kandžom, arnikom. 75 ml",
                            Image = "3443.png",
                            Price = 33.34m,
                            SKU = 0,
                            Title = "ESENCIJA BOROVICE"
                        },
                        new
                        {
                            ProductId = 14,
                            Description = "Mirisna atmosfera za ravnotežu i sklad.Sa sandalovinom, ylang ylangom,jasminom. 75 ml",
                            Image = "3460.png",
                            Price = 65.34m,
                            SKU = 0,
                            Title = "ESENCIJA SANDALOVINE"
                        },
                        new
                        {
                            ProductId = 15,
                            Description = "Kada je potrebno više energije i izdržljivosti. S ehinacejom, sibirskim ginsengom, cumbirom. 75 ml",
                            Image = "3409.png",
                            Price = 32.34m,
                            SKU = 0,
                            Title = "ESENCIJA EHINACEJE"
                        },
                        new
                        {
                            ProductId = 16,
                            Description = "Više mira i opuštanja, za obnovljenu ravnotežu. S maticnjakom, kamilicom, lavandom.75 ml",
                            Image = "3452.png",
                            Price = 98.34m,
                            SKU = 0,
                            Title = "ESENCIJA MATIČNJAKA"
                        },
                        new
                        {
                            ProductId = 17,
                            Description = "Okrepljujuci ucinak i intenzivna balzamicna svojstva. S majcinom dušicom, eukaliptusom, kaduljom. 75 ml",
                            Image = "3410.png",
                            Price = 42.34m,
                            SKU = 0,
                            Title = "ESENCIJA MAJČINE DUŠICE"
                        },
                        new
                        {
                            ProductId = 18,
                            Description = "Za cistu, tonicnu i meku kožu. S morskim algama, zelenim cajem.250 ml",
                            Image = "3380.png",
                            Price = 82.8m,
                            SKU = 0,
                            Title = "MORSKA KUPKA"
                        },
                        new
                        {
                            ProductId = 19,
                            Description = "Za stimulirajuci i osnažujuci osjecaj na koži. Sa cvjetovima sijena, arnikom, runolistom. 250 ml",
                            Image = "3381.png",
                            Price = 21.34m,
                            SKU = 0,
                            Title = "ALPSKA KUPKA"
                        },
                        new
                        {
                            ProductId = 20,
                            Description = "Dubinsko opuštanje,idealno prije spavanja.S valerijanom, bijelim glogom. 250 ml",
                            Image = "3382.png",
                            Price = 34.34m,
                            SKU = 0,
                            Title = "RELAKSIRAJUcA KUPKA"
                        },
                        new
                        {
                            ProductId = 21,
                            Description = "Nova ravnoteža zahvaljujuci biljkama s harmonizirajucim ucinkom. S gospinom travom, bergamotom. 250 ml",
                            Image = "3383.png",
                            Price = 52.34m,
                            SKU = 0,
                            Title = "HARMONIZIRAJUĆA KUPKA"
                        },
                        new
                        {
                            ProductId = 22,
                            Description = "Za pospješivanje pravilne ravnoteže kože podložne promjenama i tegobama. S cajevcem, manukom i rosalinom. 100 ml",
                            Image = "3511.png",
                            Price = 62.34m,
                            SKU = 0,
                            Title = "TEA TREE KREMA"
                        },
                        new
                        {
                            ProductId = 23,
                            Description = "Zaštitno i emolijantno djelovanje za kožu izloženu vanjskim cimbenicima. S nevenom, crnim sljezom, ehinacejom. 100 ml",
                            Image = "3514.png",
                            Price = 72.34m,
                            SKU = 0,
                            Title = "KREMA OD NEVENA"
                        },
                        new
                        {
                            ProductId = 24,
                            Description = "Majcina dušica za balzamicno i stimulirajuce djelovanje. S majcinom dušicom, eukaliptusom, ružmarinom. 100 ml",
                            Image = "3518.png",
                            Price = 82.34m,
                            SKU = 0,
                            Title = "KREMA OD MAJČINE DUŠICE"
                        },
                        new
                        {
                            ProductId = 25,
                            Description = "Calendula officinalis. Blagotvorni stimulirajuci i zagrijavajuci osjecaj na koži. S borovicom, borom, cempresom. 100 ml",
                            Image = "3517.png",
                            Price = 92.34m,
                            SKU = 0,
                            Title = "KREMA OD BOROVICE"
                        },
                        new
                        {
                            ProductId = 26,
                            Description = "Trenutno olakšanje za kožu na mjestima ozljede ili išcašenja. S gavezom, arnikom. 100 ml",
                            Image = "3547.png",
                            Price = 12.34m,
                            SKU = 0,
                            Title = "KREMASTI GEL GAVEZ"
                        },
                        new
                        {
                            ProductId = 27,
                            Description = "Ugodan osjecaj svježe suhoce za kožu tijela. S arnikom, kaduljom, maticnjakom. 100 ml",
                            Image = "3774.png",
                            Price = 134.54m,
                            SKU = 0,
                            Title = "GEL BODYFRESH"
                        },
                        new
                        {
                            ProductId = 28,
                            Description = "Za masaže koje pružaju  olakšanje mišicima i zglobovima. Soli iz Mrtvog mora, vidac, pšenicne klice. 100 ml",
                            Image = "3512.png",
                            Price = 22.34m,
                            SKU = 0,
                            Title = "KREMA SAN’ACTIV"
                        },
                        new
                        {
                            ProductId = 29,
                            Description = "Umiruje i opušta, za osjetljivu kožu. S lavandom, aloe verom, hamamelisom. 100 ml",
                            Image = "3516.png",
                            Price = 121.34m,
                            SKU = 0,
                            Title = "KREMA OD LAVANDE"
                        },
                        new
                        {
                            ProductId = 30,
                            Description = "Korisna zbog blagotvornog djelovanja na kožu, posebno na predjelima koje karakterizira napetost u zglobovima ili mišicima. S arnikom, vražjom kandžom, tamjanom. 100 ml",
                            Image = "3503.png",
                            Price = 16.67m,
                            SKU = 0,
                            Title = "KREMASTI GEL ARNIKA I HARPAGOFIT"
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.ProductCategorie", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategorie");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = 1,
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            ProductCategoryId = 2,
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            ProductCategoryId = 3,
                            CategoryId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            ProductCategoryId = 4,
                            CategoryId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            ProductCategoryId = 5,
                            CategoryId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            ProductCategoryId = 6,
                            CategoryId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            ProductCategoryId = 7,
                            CategoryId = 1,
                            ProductId = 7
                        },
                        new
                        {
                            ProductCategoryId = 8,
                            CategoryId = 1,
                            ProductId = 8
                        },
                        new
                        {
                            ProductCategoryId = 9,
                            CategoryId = 1,
                            ProductId = 9
                        },
                        new
                        {
                            ProductCategoryId = 10,
                            CategoryId = 2,
                            ProductId = 10
                        },
                        new
                        {
                            ProductCategoryId = 11,
                            CategoryId = 2,
                            ProductId = 11
                        },
                        new
                        {
                            ProductCategoryId = 12,
                            CategoryId = 2,
                            ProductId = 12
                        },
                        new
                        {
                            ProductCategoryId = 13,
                            CategoryId = 2,
                            ProductId = 13
                        },
                        new
                        {
                            ProductCategoryId = 14,
                            CategoryId = 2,
                            ProductId = 14
                        },
                        new
                        {
                            ProductCategoryId = 15,
                            CategoryId = 3,
                            ProductId = 15
                        },
                        new
                        {
                            ProductCategoryId = 16,
                            CategoryId = 3,
                            ProductId = 16
                        },
                        new
                        {
                            ProductCategoryId = 17,
                            CategoryId = 3,
                            ProductId = 17
                        },
                        new
                        {
                            ProductCategoryId = 18,
                            CategoryId = 3,
                            ProductId = 18
                        },
                        new
                        {
                            ProductCategoryId = 19,
                            CategoryId = 3,
                            ProductId = 19
                        },
                        new
                        {
                            ProductCategoryId = 20,
                            CategoryId = 4,
                            ProductId = 20
                        },
                        new
                        {
                            ProductCategoryId = 21,
                            CategoryId = 4,
                            ProductId = 21
                        },
                        new
                        {
                            ProductCategoryId = 22,
                            CategoryId = 4,
                            ProductId = 22
                        },
                        new
                        {
                            ProductCategoryId = 23,
                            CategoryId = 4,
                            ProductId = 23
                        },
                        new
                        {
                            ProductCategoryId = 24,
                            CategoryId = 4,
                            ProductId = 24
                        },
                        new
                        {
                            ProductCategoryId = 25,
                            CategoryId = 5,
                            ProductId = 25
                        },
                        new
                        {
                            ProductCategoryId = 26,
                            CategoryId = 5,
                            ProductId = 26
                        },
                        new
                        {
                            ProductCategoryId = 27,
                            CategoryId = 5,
                            ProductId = 27
                        },
                        new
                        {
                            ProductCategoryId = 28,
                            CategoryId = 5,
                            ProductId = 28
                        },
                        new
                        {
                            ProductCategoryId = 29,
                            CategoryId = 5,
                            ProductId = 29
                        },
                        new
                        {
                            ProductCategoryId = 30,
                            CategoryId = 5,
                            ProductId = 30
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.Sale", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("SalesId");

                    b.HasIndex("ClientId");

                    b.ToTable("Sale");

                    b.HasData(
                        new
                        {
                            SalesId = 1,
                            ClientId = 1,
                            Date = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "prva prodaja "
                        },
                        new
                        {
                            SalesId = 2,
                            ClientId = 1,
                            Date = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "druga prodaja "
                        },
                        new
                        {
                            SalesId = 3,
                            ClientId = 2,
                            Date = new DateTime(2023, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "treca prodaja "
                        },
                        new
                        {
                            SalesId = 4,
                            ClientId = 3,
                            Date = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "cetvrta prodaja "
                        },
                        new
                        {
                            SalesId = 5,
                            ClientId = 4,
                            Date = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "peta prodaja "
                        });
                });

            modelBuilder.Entity("DirectSales04.Models.SaleItem", b =>
                {
                    b.Property<int>("SaleItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleItemID"), 1L, 1);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("SaleItemID");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItem");

                    b.HasData(
                        new
                        {
                            SaleItemID = 1,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 5,
                            Quantity = 2,
                            SaleId = 1,
                            Status = 0,
                            SubTotal = 12.22m
                        },
                        new
                        {
                            SaleItemID = 2,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 11,
                            Quantity = 1,
                            SaleId = 1,
                            Status = 0,
                            SubTotal = 22.22m
                        },
                        new
                        {
                            SaleItemID = 3,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 12,
                            Quantity = 2,
                            SaleId = 2,
                            Status = 1,
                            SubTotal = 32.22m
                        },
                        new
                        {
                            SaleItemID = 4,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 6,
                            Quantity = 3,
                            SaleId = 2,
                            Status = 1,
                            SubTotal = 2.22m
                        },
                        new
                        {
                            SaleItemID = 5,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 3,
                            Quantity = 5,
                            SaleId = 2,
                            Status = 1,
                            SubTotal = 3.22m
                        },
                        new
                        {
                            SaleItemID = 6,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 4,
                            Quantity = 7,
                            SaleId = 3,
                            Status = 4,
                            SubTotal = 4.22m
                        },
                        new
                        {
                            SaleItemID = 7,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 8,
                            Quantity = 8,
                            SaleId = 3,
                            Status = 4,
                            SubTotal = 5.22m
                        },
                        new
                        {
                            SaleItemID = 8,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 19,
                            Quantity = 9,
                            SaleId = 3,
                            Status = 5,
                            SubTotal = 7.22m
                        },
                        new
                        {
                            SaleItemID = 9,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 21,
                            Quantity = 2,
                            SaleId = 4,
                            Status = 2,
                            SubTotal = 12.22m
                        },
                        new
                        {
                            SaleItemID = 10,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 15,
                            Quantity = 3,
                            SaleId = 4,
                            Status = 2,
                            SubTotal = 22.22m
                        },
                        new
                        {
                            SaleItemID = 11,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 16,
                            Quantity = 4,
                            SaleId = 5,
                            Status = 1,
                            SubTotal = 23.22m
                        },
                        new
                        {
                            SaleItemID = 12,
                            Discount = 0,
                            Price = 0m,
                            ProductId = 17,
                            Quantity = 2,
                            SaleId = 5,
                            Status = 1,
                            SubTotal = 26.22m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5109cf15 - d38d - 4fe9 - b385 - 2972b2d2bb20",
                            ConcurrencyStamp = "c6c872a7-f189-4ba8-90f0-f9b68801d20f",
                            Name = "Admins",
                            NormalizedName = "ADMINS"
                        },
                        new
                        {
                            Id = "41112308 - 4603 - 420b - be22 - 3af8a2166be1",
                            ConcurrencyStamp = "ddea2ede-29d5-47cf-9118-1c6e718dab47",
                            Name = "Customers",
                            NormalizedName = "CUSTOMERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4e48ebc - dde2 - 44ef - aa10 - f77c91acc588",
                            RoleId = "5109cf15 - d38d - 4fe9 - b385 - 2972b2d2bb20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DirectSales04.Models.ProductCategorie", b =>
                {
                    b.HasOne("DirectSales04.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectSales04.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DirectSales04.Models.Sale", b =>
                {
                    b.HasOne("DirectSales04.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DirectSales04.Models.SaleItem", b =>
                {
                    b.HasOne("DirectSales04.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectSales04.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DirectSales04.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DirectSales04.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectSales04.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DirectSales04.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
